From 06b53ba9e53826237caabe15006c996533a40022 Mon Sep 17 00:00:00 2001
From: Xiaolin Zhao <zhaoxiaolin@loongson.cn>
Date: Wed, 14 Dec 2022 15:44:36 +0800
Subject: [PATCH 31/32] runtime: enable memory sanitizer on loong64

Change-Id: I24364239d3dfe3ea9185bdbd0a525523ae50dfb7
---
 misc/cgo/testsanitizers/cc_test.go |  2 +-
 src/internal/platform/supported.go |  2 +-
 src/runtime/cgo/gcc_mmap.c         |  2 +-
 src/runtime/cgo/mmap.go            |  2 +-
 src/runtime/cgo_mmap.go            |  2 +-
 src/runtime/mmap.go                |  2 +-
 src/runtime/msan/msan.go           |  2 +-
 src/runtime/msan_loong64.s         | 72 ++++++++++++++++++++++++++++++
 src/runtime/sys_linux_loong64.s    | 31 ++++++++++++-
 9 files changed, 108 insertions(+), 9 deletions(-)
 create mode 100644 src/runtime/msan_loong64.s

diff --git a/misc/cgo/testsanitizers/cc_test.go b/misc/cgo/testsanitizers/cc_test.go
index 8eda1372f6..b9157d5f4a 100644
--- a/misc/cgo/testsanitizers/cc_test.go
+++ b/misc/cgo/testsanitizers/cc_test.go
@@ -563,7 +563,7 @@ func hangProneCmd(name string, arg ...string) *exec.Cmd {
 func mSanSupported(goos, goarch string) bool {
 	switch goos {
 	case "linux":
-		return goarch == "amd64" || goarch == "arm64"
+		return goarch == "amd64" || goarch == "arm64" || goarch == "loong64"
 	case "freebsd":
 		return goarch == "amd64"
 	default:
diff --git a/src/internal/platform/supported.go b/src/internal/platform/supported.go
index b0a4dba9a1..f4e057c1e4 100644
--- a/src/internal/platform/supported.go
+++ b/src/internal/platform/supported.go
@@ -28,7 +28,7 @@ func RaceDetectorSupported(goos, goarch string) bool {
 func MSanSupported(goos, goarch string) bool {
 	switch goos {
 	case "linux":
-		return goarch == "amd64" || goarch == "arm64"
+		return goarch == "amd64" || goarch == "arm64" || goarch == "loong64"
 	case "freebsd":
 		return goarch == "amd64"
 	default:
diff --git a/src/runtime/cgo/gcc_mmap.c b/src/runtime/cgo/gcc_mmap.c
index 83d857f0d1..bda5471340 100644
--- a/src/runtime/cgo/gcc_mmap.c
+++ b/src/runtime/cgo/gcc_mmap.c
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-// +build linux,amd64 linux,arm64 linux,ppc64le freebsd,amd64
+// +build linux,amd64 linux,arm64 linux,loong64 linux,ppc64le freebsd,amd64
 
 #include <errno.h>
 #include <stdint.h>
diff --git a/src/runtime/cgo/mmap.go b/src/runtime/cgo/mmap.go
index 2f7e83bcb7..716c1a3c8a 100644
--- a/src/runtime/cgo/mmap.go
+++ b/src/runtime/cgo/mmap.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build (linux && amd64) || (linux && arm64) || (freebsd && amd64)
+//go:build (linux && amd64) || (linux && arm64) || (linux && loong64) || (freebsd && amd64)
 
 package cgo
 
diff --git a/src/runtime/cgo_mmap.go b/src/runtime/cgo_mmap.go
index 30660f7784..014ce80d68 100644
--- a/src/runtime/cgo_mmap.go
+++ b/src/runtime/cgo_mmap.go
@@ -4,7 +4,7 @@
 
 // Support for memory sanitizer. See runtime/cgo/mmap.go.
 
-//go:build (linux && amd64) || (linux && arm64) || (freebsd && amd64)
+//go:build (linux && amd64) || (linux && arm64) || (linux && loong64) || (freebsd && amd64)
 
 package runtime
 
diff --git a/src/runtime/mmap.go b/src/runtime/mmap.go
index f0183f61cf..552aed22b3 100644
--- a/src/runtime/mmap.go
+++ b/src/runtime/mmap.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build !aix && !darwin && !js && (!linux || !amd64) && (!linux || !arm64) && (!freebsd || !amd64) && !openbsd && !plan9 && !solaris && !windows
+//go:build !aix && !darwin && !js && (!linux || !amd64) && (!linux || !arm64) && (!linux || !loong64) && (!freebsd || !amd64) && !openbsd && !plan9 && !solaris && !windows
 
 package runtime
 
diff --git a/src/runtime/msan/msan.go b/src/runtime/msan/msan.go
index 4e41f8528d..7b3e8e608d 100644
--- a/src/runtime/msan/msan.go
+++ b/src/runtime/msan/msan.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build msan && ((linux && (amd64 || arm64)) || (freebsd && amd64))
+//go:build msan && ((linux && (amd64 || arm64 || loong64)) || (freebsd && amd64))
 
 package msan
 
diff --git a/src/runtime/msan_loong64.s b/src/runtime/msan_loong64.s
new file mode 100644
index 0000000000..56376a4f3b
--- /dev/null
+++ b/src/runtime/msan_loong64.s
@@ -0,0 +1,72 @@
+// Copyright 2022 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build msan
+
+#include "go_asm.h"
+#include "textflag.h"
+
+#define RARG0 R4
+#define RARG1 R5
+#define RARG2 R6
+#define FARG R7
+
+// func runtime·domsanread(addr unsafe.Pointer, sz uintptr)
+// Called from msanread.
+TEXT	runtime·domsanread(SB), NOSPLIT, $0-16
+	MOVV	addr+0(FP), RARG0
+	MOVV	size+8(FP), RARG1
+	// void __msan_read_go(void *addr, uintptr_t sz);
+	MOVV	$__msan_read_go(SB), FARG
+	JMP	msancall<>(SB)
+
+// func runtime·msanwrite(addr unsafe.Pointer, sz uintptr)
+// Called from instrumented code.
+TEXT	runtime·msanwrite(SB), NOSPLIT, $0-16
+	MOVV	addr+0(FP), RARG0
+	MOVV	size+8(FP), RARG1
+	// void __msan_write_go(void *addr, uintptr_t sz);
+	MOVV	$__msan_write_go(SB), FARG
+	JMP	msancall<>(SB)
+
+// func runtime·msanmalloc(addr unsafe.Pointer, sz uintptr)
+TEXT	runtime·msanmalloc(SB), NOSPLIT, $0-16
+	MOVV	addr+0(FP), RARG0
+	MOVV	size+8(FP), RARG1
+	// void __msan_malloc_go(void *addr, uintptr_t sz);
+	MOVV	$__msan_malloc_go(SB), FARG
+	JMP	msancall<>(SB)
+
+// func runtime·msanfree(addr unsafe.Pointer, sz uintptr)
+TEXT	runtime·msanfree(SB), NOSPLIT, $0-16
+	MOVV	addr+0(FP), RARG0
+	MOVV	size+8(FP), RARG1
+	// void __msan_free_go(void *addr, uintptr_t sz);
+	MOVV	$__msan_free_go(SB), FARG
+	JMP	msancall<>(SB)
+
+// func runtime·msanmove(dst, src unsafe.Pointer, sz uintptr)
+TEXT	runtime·msanmove(SB), NOSPLIT, $0-24
+	MOVV	dst+0(FP), RARG0
+	MOVV	src+8(FP), RARG1
+	MOVV	size+16(FP), RARG2
+	// void __msan_memmove(void *dst, void *src, uintptr_t sz);
+	MOVV	$__msan_memmove(SB), FARG
+	JMP	msancall<>(SB)
+
+// Switches SP to g0 stack and calls (FARG). Arguments already set.
+TEXT	msancall<>(SB), NOSPLIT, $0-0
+	MOVV	R3, R23                  // callee-saved
+	BEQ	g, g0stack                // no g, still on a system stack
+	MOVV	g_m(g), R14
+	MOVV	m_g0(R14), R15
+	BEQ	R15, g, g0stack
+
+	MOVV	(g_sched+gobuf_sp)(R15), R9
+	MOVV	R9, R3
+
+g0stack:
+	JAL	(FARG)
+	MOVV	R23, R3
+	RET
diff --git a/src/runtime/sys_linux_loong64.s b/src/runtime/sys_linux_loong64.s
index 2a16b4f01d..30a2a03389 100644
--- a/src/runtime/sys_linux_loong64.s
+++ b/src/runtime/sys_linux_loong64.s
@@ -465,7 +465,7 @@ TEXT runtime·cgoSigtramp(SB),NOSPLIT,$0
 	JMP	runtime·sigtramp(SB)
 
 // func mmap(addr unsafe.Pointer, n uintptr, prot, flags, fd int32, off uint32) (p unsafe.Pointer, err int)
-TEXT runtime·mmap(SB),NOSPLIT|NOFRAME,$0
+TEXT runtime·sysMmap(SB),NOSPLIT|NOFRAME,$0
 	MOVV	addr+0(FP), R4
 	MOVV	n+8(FP), R5
 	MOVW	prot+16(FP), R6
@@ -486,8 +486,24 @@ ok:
 	MOVV	$0, err+40(FP)
 	RET
 
+// Call the function stored in _cgo_mmap using the GCC calling convention.
+// This must be called on the system stack.
+TEXT runtime·callCgoMmap(SB),NOSPLIT,$0
+	MOVV	addr+0(FP), R4
+	MOVV	n+8(FP), R5
+	MOVW	prot+16(FP), R6
+	MOVW	flags+20(FP), R7
+	MOVW	fd+24(FP), R8
+	MOVW	off+28(FP), R9
+	MOVV	_cgo_mmap(SB), R13
+	SUBV	$16, R3		// reserve 16 bytes for sp-8 where fp may be saved.
+	JAL	(R13)
+	ADDV	$16, R3
+	MOVV	R4, ret+32(FP)
+	RET
+
 // func munmap(addr unsafe.Pointer, n uintptr)
-TEXT runtime·munmap(SB),NOSPLIT|NOFRAME,$0
+TEXT runtime·sysMunmap(SB),NOSPLIT|NOFRAME,$0
 	MOVV	addr+0(FP), R4
 	MOVV	n+8(FP), R5
 	MOVV	$SYS_munmap, R11
@@ -497,6 +513,17 @@ TEXT runtime·munmap(SB),NOSPLIT|NOFRAME,$0
 	MOVV	R0, 0xf3(R0)	// crash
 	RET
 
+// Call the function stored in _cgo_munmap using the GCC calling convention.
+// This must be called on the system stack.
+TEXT runtime·callCgoMunmap(SB),NOSPLIT,$0
+	MOVV	addr+0(FP), R4
+	MOVV	n+8(FP), R5
+	MOVV	_cgo_munmap(SB), R13
+	SUBV	$16, R3		// reserve 16 bytes for sp-8 where fp may be saved.
+	JAL	(R13)
+	ADDV	$16, R3
+	RET
+
 // func madvise(addr unsafe.Pointer, n uintptr, flags int32)
 TEXT runtime·madvise(SB),NOSPLIT|NOFRAME,$0
 	MOVV	addr+0(FP), R4
-- 
2.40.0

