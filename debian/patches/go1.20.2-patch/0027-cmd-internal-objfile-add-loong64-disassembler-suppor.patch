From 9c302ebec40ac397e526555c4243aea36134fe05 Mon Sep 17 00:00:00 2001
From: Xiaodong Liu <liuxiaodong@loongson.cn>
Date: Fri, 10 Feb 2023 15:10:48 +0800
Subject: [PATCH 27/32] cmd/internal/objfile: add loong64 disassembler support

Change-Id: I5628436209aa58f1ba781db15ca6e78b62123065
---
 src/cmd/internal/objfile/disasm.go | 14 ++++++++++++++
 src/cmd/internal/objfile/elf.go    |  2 ++
 2 files changed, 16 insertions(+)

diff --git a/src/cmd/internal/objfile/disasm.go b/src/cmd/internal/objfile/disasm.go
index c298d7e1a9..129741fe01 100644
--- a/src/cmd/internal/objfile/disasm.go
+++ b/src/cmd/internal/objfile/disasm.go
@@ -23,6 +23,7 @@ import (
 
 	"golang.org/x/arch/arm/armasm"
 	"golang.org/x/arch/arm64/arm64asm"
+	"golang.org/x/arch/loong64/loong64asm"
 	"golang.org/x/arch/ppc64/ppc64asm"
 	"golang.org/x/arch/x86/x86asm"
 )
@@ -366,6 +367,17 @@ func disasm_arm64(code []byte, pc uint64, lookup lookupFunc, byteOrder binary.By
 	return text, 4
 }
 
+func disasm_loong64(code []byte, pc uint64, lookup lookupFunc, byteOrder binary.ByteOrder, gnuAsm bool) (string, int) {
+	inst, err := loong64asm.Decode(code)
+	var text string
+	if err != nil || inst.Op == 0 {
+		text = "?"
+	} else if gnuAsm {
+		text = fmt.Sprintf("%s %s", "", loong64asm.GNUSyntax(inst))
+	}
+	return text, 4
+}
+
 func disasm_ppc64(code []byte, pc uint64, lookup lookupFunc, byteOrder binary.ByteOrder, gnuAsm bool) (string, int) {
 	inst, err := ppc64asm.Decode(code, byteOrder)
 	var text string
@@ -388,6 +400,7 @@ var disasms = map[string]disasmFunc{
 	"amd64":   disasm_amd64,
 	"arm":     disasm_arm,
 	"arm64":   disasm_arm64,
+	"loong64": disasm_loong64,
 	"ppc64":   disasm_ppc64,
 	"ppc64le": disasm_ppc64,
 }
@@ -397,6 +410,7 @@ var byteOrders = map[string]binary.ByteOrder{
 	"amd64":   binary.LittleEndian,
 	"arm":     binary.LittleEndian,
 	"arm64":   binary.LittleEndian,
+	"loong64": binary.LittleEndian,
 	"ppc64":   binary.BigEndian,
 	"ppc64le": binary.LittleEndian,
 	"s390x":   binary.BigEndian,
diff --git a/src/cmd/internal/objfile/elf.go b/src/cmd/internal/objfile/elf.go
index c64c2540f4..2ad0465170 100644
--- a/src/cmd/internal/objfile/elf.go
+++ b/src/cmd/internal/objfile/elf.go
@@ -120,6 +120,8 @@ func (f *elfFile) goarch() string {
 		return "arm"
 	case elf.EM_AARCH64:
 		return "arm64"
+	case elf.EM_LOONGARCH:
+		return "loong64"
 	case elf.EM_PPC64:
 		if f.elf.ByteOrder == binary.LittleEndian {
 			return "ppc64le"
-- 
2.40.0

